{"version":3,"sources":["scripts/app.js"],"names":[],"mappings":"AAAA,CAAC,WAAW;EACV;;EAEA;KACG,OAAO;IACR;MACE;MACA;MACA;MACA;;;;AAIN,CAAC,WAAW;EACV;;;EAEA;KACG,OAAO;KACP,QAAQ,2BAA2B;;EAEtC,SAAS,wBAAwB,WAAW,MAAM;IAChD,IAAI,mBAAmB;;IAEvB,IAAI,UAAU;MACZ,oBAAoB;MACpB,qBAAqB;MACrB,QAAQ;;IAEV,OAAO;;;IAGP,SAAS,mBAAmB,SAAS;MACnC,iBAAiB,KAAK;;;IAGxB,SAAS,sBAAsB;QAC3B,OAAO;;;IAGX,SAAS,OAAO,WAAW,YAAY,UAAU;MAC/C,IAAI,SAAS,UAAU,WAAW;SAC/B,EAAE,MAAM,EAAE,QAAQ;MACrB,IAAI,WAAW,OAAO,KAAK;;MAE3B,GAAG,QAAQ,WAAW,WAAW;QAC/B,OAAO,SAAS,SAAS,KAAK;aACzB;QACL,OAAO,SAAS;;;;;;AAMxB,CAAC,WAAW;EACV;;;;;EAKA;KACG,OAAO;KACP,UAAU,WAAW;;EAExB,SAAS,UAAU;IACjB,IAAI,YAAY;;QAEZ,aAAa;QACb,OAAO;YACH,WAAW;;QAEf,YAAY;QACZ,cAAc;QACd,kBAAkB;;IAEtB,OAAO;;;;AAIX,CAAC,WAAW;IACR;;;IAEA;SACK,OAAO;SACP,QAAQ,iBAAiB;;IAE9B,SAAS,cAAc,WAAW,MAAM,SAAS,IAAI,UAAU;QAC3D,IAAI,cAAc;QAClB,IAAI,QAAQ;;QAEZ,IAAI,UAAU;YACV,sBAAsB;YACtB,cAAc;YACd,eAAe;YACf,kBAAkB;YAClB,kBAAkB;YAClB,WAAW;;QAEf,OAAO;;QAEP,SAAS,aAAa,OAAO;YACzB,KAAK,QAAQ;;;QAGjB,SAAS,cAAc,KAAK,MAAM,OAAO;YACrC,IAAI,QAAQ,KAAK,MAAM,UAAU,aAAa;gBAC1C,IAAI,SAAS,QAAQ;oBACjB,KAAK,MAAM,OAAO;;;YAG1B,IAAI,SAAS,QAAQ;gBACjB,KAAK,MAAM,KAAK,KAAK;mBAClB;gBACH,KAAK,MAAM,MAAM;;;;QAIzB,SAAS,iBAAiB,KAAK,MAAM,OAAO;YACxC,kBAAkB,KAAK,OAAO,KAAK,MAAM,OAAO;;;QAGpD,SAAS,iBAAiB,KAAK,MAAM,OAAO;YACxC,kBAAkB,KAAK,OAAO,KAAK,MAAM,OAAO;;;QAGpD,SAAS,kBAAkB,OAAO,KAAK,MAAM,OAAO,QAAQ;YACxD,IAAI,SAAS,QAAQ;gBACjB,IAAI,QAAQ,MAAM,KAAK,IAAI,SAAS,GAAG,EAAE,OAAO,EAAE,MAAM,QAAQ,MAAM;;gBAEtE,IAAI,WAAW,UAAU;oBACrB,MAAM,KAAK,OAAO,OAAO;uBACtB,IAAI,WAAW,UAAU;oBAC5B,MAAM,KAAK,SAAS;;mBAErB;gBACH,IAAI,WAAW,UAAU;oBACrB,MAAM,MAAM;uBACT,IAAI,WAAW,UAAU;oBAC5B,MAAM,MAAM;;;;;;QAMxB,SAAS,qBAAqB,MAAM,SAAS;YACzC,YAAY,QAAQ;;;QAGxB,SAAS,UAAU,WAAW;YAC1B,IAAI,SAAS,UAAU;YACvB,IAAI,UAAU,OAAO;YACrB,OAAO,QAAQ,SAAS,KAAK;;;QAGjC,SAAS,YAAY,MAAM;;YAEvB,OAAO,KAAK;;YAEZ,IAAI,YAAY;gBACZ,QAAQ;gBACR,cAAc,KAAK;;YAEvB,IAAI,UAAU;YACd,KAAK,KAAK,QAAQ,SAAS,MAAM;gBAC7B,kBAAkB,MAAM,WAAW;;;YAGvC,OAAO;gBACH,QAAQ;gBACR,MAAM;;;;QAId,SAAS,kBAAkB,UAAU,QAAQ,MAAM;YAC/C,IAAI,YAAY;gBACZ,MAAM,SAAS,UAAU,YAAY,MAAM;oBACvC,IAAI,YAAY,SAAS;oBACzB,IAAI,YAAY,YAAY;wBACxB,IAAI,gBAAgB,YAAY;wBAChC,cAAc,UAAU,YAAY;2BACjC;wBACH,KAAK,MAAM,+CAA+C;wBAC1D,OAAO,UAAU;;;gBAGzB,OAAO,SAAS,UAAU,YAAY,MAAM;oBACxC,IAAI,WAAW;oBACf,SAAS,MAAM,QAAQ,SAAS,KAAK;uBAClC,kBAAkB,MAAM,WAAW,OAAO;;oBAE7C,SAAS,QAAQ;;gBAErB,SAAS,SAAS,OAAO,QAAQ,MAAM;oBACnC,IAAI,MAAM,YAAY,UAAU;wBAC5B,OAAO,aAAa,OAAO,MAAM;;;;;YAK7C,IAAI,cAAc;gBACd,UAAU,SAAS,UAAU,YAAY,MAAM;oBAC3C,IAAI,MAAM,SAAS;oBACnB,IAAI,UAAU,WAAW;oBACzB,SAAS,aAAa,SAAS,QAAQ;yBAClC,QAAQ,YAAY,OAAO,UAAU,OAAO;4BACzC,IAAI,SAAS,MAAM,QAAQ;gCACvB,OAAO,MAAM,UAAU;mCACpB;gCACH,OAAO;;;;;gBAKvB,UAAU,SAAS,UAAU,YAAY,MAAM;oBAC3C,IAAI,MAAM,SAAS;oBACnB,IAAI,UAAU,WAAW;oBACzB,SAAS,aAAa,SAAS,QAAQ;yBAClC,QAAQ,YAAY,OAAO,UAAU,OAAO;4BACzC,IAAI,SAAS,MAAM,QAAQ;gCACvB,OAAO,MAAM,UAAU;mCACpB;gCACH,OAAO;;;;;;;YAO3B,IAAI;YACJ,IAAI;YACJ,IAAI,QAAQ,SAAS,WAAW;gBAC5B,OAAO;gBACP,aAAa,OAAO,WAAW;mBAC5B;gBACH,IAAI,SAAS,UAAU;oBACnB,OAAO,SAAS;oBAChB,aAAa,OAAO,WAAW;uBAC5B;oBACH,OAAO;oBACP,aAAa;;;gBAGjB,KAAK,IAAI,OAAO,UAAU;oBACtB,IAAI,QAAQ,UAAU,OAAO,WAAW;wBACpC,IAAI,OAAO,UAAU;wBACrB,KAAK,UAAU,YAAY;2BACxB;wBACH,KAAK,MAAM,0CAA0C;;;gBAG7D,KAAK,IAAI,OAAO,YAAY;oBACxB,IAAI,QAAQ,UAAU,OAAO,aAAa;wBACtC,IAAI,aAAa,YAAY;wBAC7B,WAAW,UAAU,YAAY;2BAC9B;wBACH,KAAK,MAAM,0CAA0C;;;;gBAI7D,IAAI,UAAU,UAAU;oBACpB,IAAI,WAAW,UAAU;oBACzB,SAAS,UAAU,YAAY;;;;YAIvC,IAAI,QAAQ,UAAU,aAAa;gBAC/B,OAAO,WAAW,QAAQ;;YAE9B,KAAK,KAAK;;;;;AAKtB,CAAC,WAAW;EACV;;;EAEA;KACG,OAAO;KACP,WAAW,kBAAkB;;EAEhC,SAAS,eAAe,QAAQ,UAAU,MAAM,eAAe,yBAAyB;IACtF,IAAI,KAAK;;IAET,GAAG,SAAS;IACZ,GAAG,OAAO;IACV,GAAG,QAAQ;IACX,GAAG,SAAS;IACZ,GAAG,YAAY;IACf,GAAG,UAAU;;;IAGb,GAAG,WAAW;;;IAGd,IAAI;MACF,GAAG,YAAY,OAAO,QAAQ,OAAO,KAAK;MAC1C,MAAM,GAAG;;;;IAIX,GAAG,GAAG,WAAW;MACf,cAAc,UAAU,GAAG,WAAW;QACpC,SAAS,MAAM;UACb,GAAG,SAAS,KAAK;UACjB,GAAG,OAAO,KAAK;;;WAGd;MACL,KAAK,MAAM;;;;IAIb,cAAc,aAAa,GAAG;;IAE9B,SAAS,SAAS,MAAM;MACtB,IAAI,mBAAmB,wBAAwB;MAC/C,QAAQ,QAAQ,kBAAkB,SAAS,SAAS;QAClD,QAAQ,GAAG,QAAQ,GAAG;;;;MAIxB,IAAI,KAAK,QAAQ;QACf,wBAAwB,OAAO,GAAG;UAChC,GAAG,OAAO,WAAW;YACnB,aAAa;;aAEZ;UACH,aAAa;;;;IAInB,SAAS,aAAa,KAAK;MACzB,GAAG,UAAU;MACb,GAAG,SAAS;MACZ,GAAG,YAAY;;;MAGf,SAAS,UAAU;QACjB,GAAG,YAAY;;QAEf,SAAS,UAAU,EAAE,GAAG,SAAS,SAAS;SACzC;;;;;AAKT,CAAC,WAAW;EACV;;;EAEA;KACG,OAAO;KACP,IAAI;;;EAGP,SAAS,SAAS,MAAM,eAAe;IACrC,cAAc,qBAAqB,WAAW,SAAS,UAAU,YAAY,MAAM;OAChF,SAAS,UAAU;OACnB,SAAS,cAAc;;;;;;;AAO9B,CAAC,WAAW;EACV;;EAEA;KACG,OAAO;KACP,SAAS,YAAY;KACrB,SAAS,UAAU;;;;AAIxB,CAAC,WAAW;EACV;;;EAEA;KACG,OAAO;KACP,OAAO;;;EAGV,SAAS,OAAO,cAAc,cAAc;;IAE1C,aAAa,aAAa;;;IAG1B,aAAa,YAAY;IACzB,aAAa,UAAU;IACvB,aAAa,gBAAgB;IAC7B,aAAa,oBAAoB;IACjC,aAAa,cAAc;;;;;AAK/B,QAAQ,OAAO,uBAAuB,IAAI,CAAC,kBAAkB,SAAS,gBAAgB,CAAC,eAAe,IAAI,iDAAiD,qUAAqU","file":"scripts/app.js","sourcesContent":["(function() {\n  'use strict';\n\n  angular\n    .module('simCitySimDirective',\n    [\n      'ngResource',\n      'ui.bootstrap',\n      'toastr',\n      'schemaForm'\n    ]);\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('simCitySimDirective')\n    .service('SubmitSimulationService', SubmitSimulationService);\n\n  function SubmitSimulationService($resource, $log) {\n    var onSubmitHandlers = [];\n\n    var service = {\n      addOnSubmitHandler: addOnSubmitHandler,\n      getOnSubmitHandlers: getOnSubmitHandlers,\n      submit: submit\n    };\n    return service;\n\n    // Handler should be function(schema, form) {}\n    function addOnSubmitHandler(handler) {\n      onSubmitHandlers.push(handler);\n    }\n\n    function getOnSubmitHandlers() {\n        return onSubmitHandlers;\n    }\n\n    function submit(targetURL, parameters, callback) {\n      var poster = $resource(targetURL, {},\n         { send: { method: 'POST' } });\n      var submited = poster.send(parameters);\n\n      if(angular.isFunction(callback)) {\n        return submited.$promise.then(callback);\n      } else {\n        return submited.$promise;\n      }\n    }\n  }\n})();\n\n(function() {\n  'use strict';\n\n  // var scripts = document.getElementsByTagName(\"script\")\n  // var currentScriptPath = scripts[scripts.length-1].src;\n\n  angular\n    .module('simCitySimDirective')\n    .directive('simForm', SimForm);\n\n  function SimForm() {\n    var directive = {\n        // templateUrl: currentScriptPath.replace('directive.js', 'directive.html'),  // Dev code\n        templateUrl: 'app/components/sim-city/simform.directive.html',\n        scope: {\n            schemaurl: '@'\n        },\n        controller: 'FormController',\n        controllerAs: 'vm',\n        bindToController: true\n    };\n    return directive;\n  }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('simCitySimDirective')\n        .service('SchemaService', SchemaService);\n\n    function SchemaService($resource, $log, $filter, $q, $timeout) {\n        var customTypes = {};\n        var model = {};\n\n        var service = {\n            addCustomTypeHandler: addCustomTypeHandler,\n            setFormModel: setFormModel,\n            modelAddValue: modelAddValue,\n            modelUpdateValue: modelUpdateValue,\n            modelDeleteValue: modelDeleteValue,\n            getSchema: getSchema\n        };\n        return service;\n\n        function setFormModel(model) {\n            this.model = model;\n        }\n\n        function modelAddValue(key, type, value) {\n            if (typeof (this.model[key]) === 'undefined') {\n                if (type === 'list') {\n                    this.model[key] = [];\n                }\n            }\n            if (type === 'list') {\n                this.model[key].push(value);\n            } else {\n                this.model.key = value;\n            }\n        }\n\n        function modelUpdateValue(key, type, value) {\n            _updateModelValue(this.model, key, type, value, 'update');\n        }\n\n        function modelDeleteValue(key, type, value) {\n            _updateModelValue(this.model, key, type, value, 'delete');\n        }\n\n        function _updateModelValue(model, key, type, value, action) {\n            if (type === 'list') {\n                var index = model[key].map(function(f) { return f.id }).indexOf(value.id);\n\n                if (action === 'delete') {\n                    model[key].splice(index, 1)\n                } else if (action === 'update') {\n                    model[key][index] = value;\n                }\n            } else {\n                if (action === 'delete') {\n                    model.key = undefined\n                } else if (action === 'update') {\n                    model.key = value;\n                }\n            }\n        }\n\n        // Handler should be function(schema, form) {}\n        function addCustomTypeHandler(type, handler) {\n            customTypes[type] = handler;\n        }\n\n        function getSchema(schemaURL) {\n            var schema = $resource(schemaURL);\n            var request = schema.get();\n            return request.$promise.then(parseSchema);\n        }\n\n        function parseSchema(data) {\n            // Transform Resource object to JSON\n            data = data.toJSON();\n            \n            var newSchema = {\n                \"type\": \"object\",\n                \"properties\": data.properties\n            }\n            var newForm = [];\n            data.form.forEach(function(item) {\n                applyRulesForItem(item, newSchema, newForm);\n            });\n\n            return {\n                schema: newSchema,\n                form: newForm\n            };\n        }\n\n        function applyRulesForItem(formItem, schema, form) {\n            var formRules = {\n                type: function(formItem, schemaItem, form) {\n                    var paramType = formItem['type'];\n                    if (customTypes[paramType]) {\n                        var customTypeFun = customTypes[paramType];\n                        customTypeFun(formItem, schemaItem, form);\n                    } else {\n                        $log.debug('SchemaService: no mapping known for type: ' + paramType);\n                        schema['type'] = paramType;\n                    }\n                },\n                items: function(formItem, schemaItem, form) {\n                    var newItems = [];\n                    formItem.items.forEach(function(item){\n                       applyRulesForItem(item, schemaItem.items, newItems) \n                    });\n                    formItem.items = newItems;\n                },\n                default: function(param, schema, form) {\n                    if (param['type'] === 'number') {\n                        schema['default'] = Number(param['default']);\n                    }\n                }\n            };\n            \n            var schemaRules = {\n                minItems: function(formItem, schemaItem, form) {   \n                    var key = formItem.key;\n                    var minimum = schemaItem.minItems;           \n                    formItem['ngModel'] = function(ngModel){\n                         ngModel.$validators[key] = function (value) {\n                            if (value && value.length) {\n                                return value.length >= minimum;\n                            } else {\n                                return false;\n                            }\n                        };\n                    };\n                },\n                maxItems: function(formItem, schemaItem, form) {   \n                    var key = formItem.key;\n                    var maximum = schemaItem.minItems;           \n                    formItem['ngModel'] = function(ngModel){\n                         ngModel.$validators[key] = function (value) {\n                            if (value && value.length) {\n                                return value.length <= maximum;\n                            } else {\n                                return false;\n                            }\n                        };\n                    };\n                }\n            };\n            \n            var name;\n            var schemaItem;\n            if (angular.isString(formItem)) {\n                name = formItem;\n                schemaItem = schema.properties[name];\n            } else {\n                if ('key' in formItem) {\n                    name = formItem.key;\n                    schemaItem = schema.properties[name];\n                } else {\n                    name = undefined\n                    schemaItem = undefined\n                }\n \n                for (var key in formItem) {\n                    if (key !== 'type' && key in formRules) {\n                        var rule = formRules[key];\n                        rule(formItem, schemaItem, form);\n                    } else {\n                        $log.debug('SchemaService: no rule know for key: ' + key);\n                    }\n                }\n                for (var key in schemaItem) {\n                    if (key !== 'type' && key in schemaRules) {\n                        var schemarule = schemaRules[key];\n                        schemarule(formItem, schemaItem, form);\n                    } else {\n                        $log.debug('SchemaService: no rule know for key: ' + key);\n                    }\n                }\n                // Perform type handlers last so they can use the other values\n                if ('type' in formItem) {\n                    var typerule = formRules['type'];\n                    typerule(formItem, schemaItem, form);\n                }\n            }\n\n            if (angular.isDefined(schemaItem)) {\n                schema.properties[name] = schemaItem;\n            }\n            form.push(formItem);\n        }\n    }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('simCitySimDirective')\n    .controller('FormController', FormController);\n\n  function FormController($scope, $timeout, $log, SchemaService, SubmitSimulationService) {\n    var vm = this;\n\n    vm.schema = {};\n    vm.form = [];\n    vm.model = {};\n    vm.hidden = true;\n    vm.startFade = false;\n    vm.message = '';\n\n    // Functions the controller exposes\n    vm.onSubmit = onSubmit;\n\n    // Initialize controller\n    try {\n      vm.schemaurl = $scope.$parent.widget.data.schemaurl;\n    } catch(e) {\n      // Do nothing...\n    }\n\n    if(vm.schemaurl) {\n      SchemaService.getSchema(vm.schemaurl).then(\n        function(data) {\n          vm.schema = data.schema;\n          vm.form = data.form;\n        }\n      );\n    } else {\n      $log.debug('SimCityDirective.FormController: no URL provided');\n    }\n    \n    // Add the model of this form to the schema service so it can be updated\n    SchemaService.setFormModel(vm.model);\n\n    function onSubmit(form) {\n      var onSubmitHandlers = SubmitSimulationService.getOnSubmitHandlers();\n      angular.forEach(onSubmitHandlers, function(handler) {\n        handler(vm.schema, vm.model);  \n      });\n      \n      // Then we check if the form is valid\n      if (form.$valid) {\n        SubmitSimulationService.submit(vm.schemaurl,\n          vm.model, function() {\n            flashMessage('Form has been submitted!');\n          });\n      } else {\n          flashMessage('Form invalid! It has not been submitted!');\n      } \n    }\n\n    function flashMessage(msg) {\n      vm.message = msg;\n      vm.hidden = false;  // Show\n      vm.startFade = false;\n\n      // After 5 seconds, fade\n      $timeout(function(){\n        vm.startFade = true;\n        // and then hide\n        $timeout(function(){ vm.hidden = true; }, 500);\n      }, 2000);\n    }\n  }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('simCitySimDirective')\n    .run(runBlock);\n\n  /** @ngInject */\n  function runBlock($log, SchemaService) {\n    SchemaService.addCustomTypeHandler('point2d', function(formItem, schemaItem, form) {\n       formItem['type'] = 'template'\n       formItem['template'] = '<div>({{item.x}}, {{item.y}})</div>'\n    });\n  }\n\n})();\n\n/* global malarkey:false, moment:false */\n(function() {\n  'use strict';\n\n  angular\n    .module('simCitySimDirective')\n    .constant('malarkey', malarkey)\n    .constant('moment', moment);\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('simCitySimDirective')\n    .config(config);\n\n  /** @ngInject */\n  function config($logProvider, toastrConfig) {\n    // Enable log\n    $logProvider.debugEnabled(true);\n\n    // Set options third-party lib\n    toastrConfig.allowHtml = true;\n    toastrConfig.timeOut = 3000;\n    toastrConfig.positionClass = 'toast-top-right';\n    toastrConfig.preventDuplicates = true;\n    toastrConfig.progressBar = true;\n  }\n\n})();\n\nangular.module(\"simCitySimDirective\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/components/sim-city/simform.directive.html\",\"<div><div class=\\\"alert alert-success\\\" ng-hide=\\\"vm.hidden\\\" ng-class=\\\"{fade: vm.startFade}\\\">{{ vm.message }}</div><form name=\\\"myForm\\\" sf-schema=\\\"vm.schema\\\" sf-form=\\\"vm.form\\\" sf-model=\\\"vm.model\\\" sf-options=\\\"\\\"></form><button ng-click=\\\"vm.onSubmit(myForm)\\\" class=\\\"btn btn-success\\\">Submit</button></div>\");}]);"],"sourceRoot":"/source/"}